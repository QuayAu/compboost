% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{PolynomialBlearner}
\alias{PolynomialBlearner}
\title{Baselearner to make polynomial regression}
\format{\code{\link{S4}} object.}
\description{
\code{PolynomialBlearner} creates a polynomial base-learner object which can
be trained and used individually. Note that this is just for testing and
can't be used within the actual algorithm.
}
\section{Usage}{

\preformatted{
PolynomialBlearner$new(data_source, data_target, degree)
}
}

\section{Arguments}{

\describe{
\item{\code{data_source} [\code{Data} Object]}{
  Data object which contains the source data.
}
\item{\code{data_target} [\code{Data} Object]}{
  Data object which gets the transformed source data.
}
\item{\code{degree} [\code{integer(1)}]}{
  This argument is used for transforming the source data. Each element is
  taken to the power of the \code{degree} argument.
}
}
}

\section{Details}{

  The polynomial base-learner takes any matrix which the user wants to pass
  the number of columns indicates how much parameter are estimated. Note
  that the intercept isn't added by default. To get an intercept add a
  column of ones to the source data matrix.

  This class is a wrapper around the pure \code{C++} implementation. To see
  the functionality of the \code{C++} class visit
  \url{https://schalkdaniel.github.io/compboost/cpp_man/html/classblearner_1_1_polynomial_blearner.html}.
}

\section{Fields}{

  This class doesn't contain public fields.
}

\section{Methods}{

\describe{
\item{\code{train(response)}}{Predict parameters of the base-learner using
  a given \code{response}.}
\item{\code{getParameter()}}{Get the estimated parameters.}
\item{\code{predict()}}{Predict by using the train data.}
\item{\code{predictNewdata(newdata)}}{Predict by using a new \code{Data}
  object.}
\item{\code{getData()}}{Get the data matrix of the target data which is used
  for modelling.}
}
}

\examples{
# Sample data:
data.mat = cbind(1, 1:10)
y = 2 + 3 * 1:10

# Create new data object:
data.source = InMemoryData$new(data.mat, "my.data.name")
data.target = InMemoryData$new()

# Create new linear base-learner:
bl.poly = PolynomialBlearner$new(data.source, data.target, degree = 1)

# Train the learner:
bl.poly$train(y)

# Get estimated parameter:
bl.poly$getParameter()

}
