% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{BinomialLoss}
\alias{BinomialLoss}
\title{0-1 Loss for binary classification derifed of the binomial distribution}
\format{\code{\link{S4}} object.}
\description{
This loss can be used for binary classification. The coding we have chosen
here acts on 
\eqn{y \in \{-1, 1\}}.
}
\details{
\strong{Loss Function:}
\deqn{L(y, f(x)) = \log\left\{1 + \exp\left(-2yf(x)\right)\right\}}
\strong{Gradient:}
\deqn{\frac{\delta}{\delta f(x)}\ L(y, f(x)) = - \frac{y}{1 + \exp\left(2yf\right)}}
\strong{Initialization:}
\deqn{\hat{f}^{[0]}(x) = \frac{1}{2}\log\left(\frac{p}{1 - p}\right)}
with
\deqn{p = \frac{1}{n}\sum\limits_{i=1}^n\mathbb{1}_{\{y_i = 1\}}}
}
\section{Usage}{

\preformatted{
BinomialLoss$new()
BinomialLoss$new(offset)
}
}

\section{Arguments}{

\describe{
\item{\code{offset} [\code{numeric(1)}]}{ 
  Numerical value which can be used to set a custom offset. If so, this 
  value is returned instead of the loss optimal initialization.
}
}
}

\section{Details}{

     
  This class is a wrapper around the pure \code{C++} implementation. To see
  the functionality of the \code{C++} class visit
  \url{https://schalkdaniel.github.io/compboost/cpp_man/html/classloss_1_1_binomial_loss.html}.
}

\section{Fields}{

  This class doesn't contain public fields.
}

\section{Methods}{

\describe{
\item{\code{testLoss(truth, prediction)}}{Calculates the loss for a given
  true response and a corresponding prediction.}
\item{\code{testGradient(truth, prediction)}}{Calculates the gradient of 
  loss function for a given true response and a corresponding prediction.}
\item{\code{testconstantInitializer(truth)}}{Calculates the constant 
  initialization of a given vector of true values.}
}
}

\examples{
# Sample data:
set.seed(123)
truth = sample(c(1, -1), 10, TRUE)
prediction = rnorm(10)

# Create new loss object:
bin.loss = BinomialLoss$new()
bin.loss

# Calculate loss:
bin.loss$testLoss(truth, prediction)

# Calculate gradient:
bin.loss$testGradient(truth, prediction)

# Calculate the offset if this loss is used for the training:
bin.loss$testConstantInitializer(truth)

}
