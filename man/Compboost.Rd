% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compboost.R
\name{Compboost}
\alias{Compboost}
\title{Compboost API}
\format{\code{\link{R6Class}} object.}
\description{
\code{Compboost} wraps the \code{S4} class system exposed by \code{Rcpp} to make defining
objects, adding objects, the training, calculating predictions, and plotting much easier.
As already mentioned, the \code{Compboost R6} class is just a wrapper and compatible
with the most \code{S4} classes.
}
\section{Usage}{

\preformatted{
cboost = Compboost$new(data, target, optimizer = OptimizerCoordinateDescent$new(), loss,
  learning.rate = 0.05, oob.fraction)

cboost$addLogger(logger, use.as.stopper = FALSE, logger.id, ...)

cbboost$addBaselearner(features, id, bl.factory, data.source = InMemoryData,
  data.target = InMemoryData, ...)

cbboost$train(iteration = 100, trace = -1)

cboost$getCurrentIteration()

cboost$predict(newdata = NULL)

cboost$getInbagRisk()

cboost$getSelectedBaselearner()

cboost$getEstimatedCoef()

cboost$plot(blearner.type = NULL, iters = NULL, from = NULL, to = NULL, length.out = 1000)

cboost$getBaselearnerNames()

cboost$prepareData(newdata)

cboost$getLoggerData()

cboost$calculateFeatureImportance(num.feats = NULL)

cboost$plotFeatureImportance(num.feats = NULL)

cboost$plotInbagVsOobRisk()

}
}

\section{Arguments}{

\strong{For Compboost$new()}:
\describe{
  \item{\code{data}}{[\code{data.frame}]\cr
    A data frame containing the data.
  }
  \item{\code{target}}{[\code{character(1)}]\cr
    Character value containing the target variable. Note that the loss must match the 
    data type of the target.
  }
  \item{\code{optimizer}}{[\code{S4 Optimizer}]\cr
    An initialized \code{S4 Optimizer} object exposed by Rcpp (e.g. \code{OptimizerCoordinateDescent$new()})
    to select features at each iteration.
  }
  \item{\code{loss}}{[\code{S4 Loss}]\cr
    Initialized \code{S4 Loss} object exposed by Rcpp that is used to calculate the risk and pseudo 
    residuals (e.g. \code{LossQuadratic$new()}).
  }
  \item{\code{learning.rage}}{[\code{numeric(1)}]\cr
    Learning rate to shrink the parameter in each step.
  }
  \item{\code{oob.fraction}}{[\code{numeric(1)}]\cr
    Fraction of how much data are used to track the out of bag risk.
  }
}

\strong{For cboost$addLogger()}:
\describe{
  \item{\code{logger}}{[\code{S4 Logger}]\cr
    Uninitialized \code{S4 Logger} class object that is registered in the model. 
    See the details for possible choices.
  }
  \item{\code{use.as.stopper}}{[\code{logical(1)}]\cr
    Logical value indicating whether the new logger should also be used as stopper 
    (early stopping). Default value is \code{FALSE}.
  }
  \item{\code{logger.id}}{[\code{character(1)}]\cr
    Id of the new logger. This is necessary to, for example, register multiple risk logger.
  }
  \item{}{\code{...}\cr
    Further arguments passed to the constructor of the \code{S4 Logger} class specified in
    \code{logger}. For possible arguments see details or the help pages (e.g. \code{?LoggerIteration}).
  }
}

\strong{For cboost$addBaselearner()}:
\describe{
\item{\code{features}}{[\code{character()}]\cr
  Vector of column names which are used as input data matrix for a single base-learner. Note that not
  every base-learner supports the use of multiple features (e.g. the spline base-learner does not).
}
\item{\code{id}}{[\code{character(1)}]\cr
  Id of the base-learners. This is necessary since it is possible to define multiple learners with the same underlying data.
}
\item{\code{bl.factory}}{[\code{S4 Factory}]\cr
  Uninitialized base-learner factory given as \code{S4 Factory} class. See the details
  for possible choices.
}
\item{\code{data.source}}{[\code{S4 Data}]\cr
  Data source object. At the moment just in memory is supported.
}
\item{\code{data.target}}{[\code{S4 Data}]\cr
  Data target object. At the moment just in memory is supported.
}
\item{}{\code{...}\cr
  Further arguments passed to the constructor of the \code{S4 Factory} class specified in
  \code{bl.factory}. For possible arguments see the help pages (e.g. \code{?BaselearnerPSplineFactory})
  of the \code{S4} classes.
}
}

\strong{For cboost$train()}:
\describe{
  \item{\code{iteration}}{[\code{integer(1)}]\cr
    Number of iterations that are trained. If the model is already trained the model is set to the given number
    by goint back through the already trained base-learners or training new ones. Note: This function defines an
    iteration logger with the id \code{_iterations} which is then used as stopper.
  }
  \item{\code{trace}}{[\code{integer(1)}]\cr
    Integer indicating how often a trace should be printed. Specifying \code{trace = 10}, then every
    10th iteration is printed. If no trace should be printed set \code{trace = 0}. Default is
    -1 which means that in total 40 iterations are printed.
  }
}

\strong{For cboost$predict()}:
\describe{
\item{\code{newdata}}{[\code{data.frame()}]\cr
	 Data to predict on. If newdata equals \code{NULL} predictions on the training data are returned.
}
}
\strong{For cboost$plot()}:
\describe{
\item{\code{blearner.type}}{[\code{character(1)}]\cr
	 Character name of the base-learner to plot the additional contribution to the response.
}
\item{\code{iters}}{[\code{integer()}]\cr
	 Integer vector containing the iterations the user wants to illustrate.
}
\item{\code{from}}{[\code{numeric(1)}]\cr
	 Lower bound for plotting (should be smaller than \code{to}).
}
\item{\code{to}}{[\code{numeric(1)}]\cr
	 Upper bound for plotting (should be greater than \code{from}).
}
\item{\code{length.out}}{[\code{integer(1)}]\cr
	 Number of equidistant points between \code{from} and \code{to} used for plotting.
}
}
}

\section{Details}{

  \strong{Loss}\cr
  Available choices for the loss are:
	 \itemize{
    \item
      \code{LossQuadratic} (Regression)
 
    \item
      \code{LossAbsolute} (Regression)
 
    \item
      \code{LossBinomial} (Binary Classification)
 
    \item
      \code{LossCustom} (Custom)
 
  }
  (For each loss take also a look at the help pages (e.g. \code{?LossBinomial}) and the
  \code{C++} documentation for details)

  \strong{Logger}\cr
  Available choices for the logger are:
  \itemize{
    \item
      \code{LoggerIteration}: Logs the current iteration. Additional arguments:
      \describe{
        \item{\code{max_iterations} [\code{integer(1)}]}{
          Maximal number of iterations.
        }
      }

    \item
      \code{LoggerTime}: Logs the elapsed time. Additional arguments:
      \describe{
        \item{\code{max_time} [\code{integer(1)}]}{
          Maximal time for the computation.
        }
        \item{\code{time_unit} [\code{character(1)}]}{
          Character to specify the time unit. Possible choices are \code{minutes}, \code{seconds}, or \code{microseconds}.
        }
      }

    \item
      \code{LoggerInbagRisk}:
      \describe{
        \item{\code{used_loss} [\code{S4 Loss}]}{
          Loss as initialized \code{S4 Loss} which is used to calculate the empirical risk. See the
          details for possible choices.
        }
        \item{\code{eps_for_break} [\code{numeric(1)}]}{
          This argument is used if the logger is also used as stopper. If the relative improvement
          of the logged inbag risk falls below this boundary, then the stopper breaks the algorithm.
        }
      }

    \item
      \code{LoggerOobRisk}:
      \describe{
        \item{\code{used_loss} [\code{S4 Loss}]}{
          Loss as initialized \code{S4 Loss} which is used to calculate the empirical risk. See the
          details for possible choices.
        }
        \item{\code{eps_for_break} [\code{numeric(1)}]}{
          This argument is used if the logger is also used as stopper. If the relative improvement
          of the logged inbag risk falls above this boundary the stopper breaks the algorithm.
        }
        \item{\code{oob_data} [\code{list}]}{
          A list which contains data source objects which corresponds to the source data of each registered factory.
          The source data objects should contain the out of bag data. This data is then used to calculate the
          new predictions in each iteration.
        }
        \item{\code{oob_response} [\code{vector}]}{
          Vector which contains the response for the out of bag data given within \code{oob_data}.
        }
      }
    }
  
  \strong{Note}:
  \itemize{
    \item
      Even if you do not use the logger as stopper you have to define the arguments such as \code{max_time}.

    \item
      We are aware of that the style guide here is not consistent with the \code{R6} arguments. Nevertheless, using
      \code{_} as word separator is due to the used argument names within \code{C++}.
  }
}

\section{Fields}{

\describe{
  \item{\code{data} [\code{data.frame}]}{
    Data used for training the algorithm.
  }
  \item{\code{data.oob} [\code{data.frame}]}{
    Data used for out of bag tracking.
  }
  \item{\code{oob.fraction} [\code{numeric(1)}]}{
    Fraction of how much data are used to track the out of bag risk.
  }
  \item{\code{response} [\code{vector}]}{
    Response vector.
  }
  \item{\code{target} [\code{character(1)}]}{
  	 Name of the target variable
  }
  \item{\code{id} [\code{character(1)}]}{
  	 Name of the given dataset. 
  }
  \item{\code{optimizer} [\code{S4 Optimizer}]}{
    Optimizer used within the fitting process.
  }
  \item{\code{loss} [\code{S4 Loss}]}{
    Loss used to calculate pseudo residuals and empirical risk.
  }
  \item{\code{learning.rate} [\code{numeric(1)}]}{
    Learning rate used to shrink the estimated parameter in each iteration.
  }
  \item{\code{model} [\code{S4 Compboost_internal}]}{
    \code{S4 Compboost_internal} class object from that the main operations are called.
  }
  \item{\code{bl.factory.list} [\code{S4 FactoryList}]}{
    List of all registered factories represented as \code{S4 FactoryList} class.
  }
  \item{\code{positive.category} [\code{character(1)}]}{
    Character containing the name of the positive class in the case of (binary) classification.
  }
  \item{\code{stop.if.all.stoppers.fulfilled} [\code{logical(1)}]}{
    Logical indicating whether all stopper should be used simultaneously or if it is sufficient
    to just use the first stopper to stop the algorithm.
  }
}
}

\section{Methods}{

\describe{
  \item{\code{addLogger}}{method to add a logger to the algorithm (Note: This is just possible before the training).}
  \item{\code{addBaselearner}}{method to add a new base-learner to the algorithm (Note: This is just possible before the training).}
  \item{\code{getCurrentIteration}}{method to get the current iteration on which the algorithm is set.}
  \item{\code{train}}{method to train the algorithm.}
  \item{\code{predict}}{method to predict on a trained object.}
  \item{\code{getSelectedBaselearner}}{method to get a character vector of selected base-learner.}
  \item{\code{getEstimatedCoef}}{method to get a list of estimated coefficient of each selected base-learner.}
  \item{\code{plot}}{method to plot individual feature effects.}
  \item{\code{getBaselearnerNames}}{method to get the names of the registered factories.}
  \item{\code{prepareData}}{method to prepare data to track the out of bag risk of an arbitrary loss/performance function.}
  \item{\code{getLoggerData}}{method to the the logged data from all registered logger.}
  \item{\code{calculateFeatureImportance}}{method to calculate feature importance.}
  \item{\code{plotFeatureImportance}}{method to plot the feature importance calculated by \code{calulateFeatureImportance}.}
  \item{\code{plotInbagVsOobRisk}}{method to plot the inbag vs the out of bag behavior. This is just applicable if a logger with name \code{oob_logger} was registered. This is automatically done if the \code{oob.fraction} is set.}
}
}

\examples{
cboost = Compboost$new(mtcars, "mpg", loss = LossQuadratic$new(), oob.fraction = 0.3)
cboost$addBaselearner("hp", "spline", BaselearnerPSpline, degree = 3,
  n.knots = 10, penalty = 2, differences = 2)
cboost$train(1000)

table(cboost$getSelectedBaselearner())
cboost$plot("hp_spline")
cboost$plotInbagVsOobRisk()
}
