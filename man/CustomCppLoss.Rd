% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{CustomCppLoss}
\alias{CustomCppLoss}
\title{Create custom cpp losses by using cpp functions and external pointer.}
\format{\code{\link{S4}} object.}
\description{
\code{CustomCppLoss} creates a custom loss by using 
\code{Rcpp::XPtr} to set \code{C++} functions.
}
\section{Usage}{

\preformatted{
CustomCppLoss$new(loss_ptr, grad_ptr, const_init_ptr)
}
}

\section{Arguments}{

\describe{
\item{\code{loss_ptr} [\code{externalptr}]}{
  External pointer to the \code{C++} loss function.
}
\item{\code{grad_ptr} [\code{externalptr}]}{
  External pointer to the \code{C++} gradient function.
}
\item{\code{const_init_ptr} [\code{externalptr}]}{
  External pointer to the \code{C++} constant initialization function.
}
}
}

\section{Details}{

  For an example see the extending compboost vignette or the function
  \code{getCustomCppExample(example = "loss")}.
  
  This class is a wrapper around the pure \code{C++} implementation. To see
  the functionality of the \code{C++} class visit
  \url{https://schalkdaniel.github.io/compboost/cpp_man/html/classloss_1_1_custom_cpp_loss.html}.
}

\section{Fields}{

  This class doesn't contain public fields.
}

\section{Methods}{

\describe{
\item{\code{testLoss(truth, prediction)}}{Calculates the loss for a given
  true response and a corresponding prediction.}
\item{\code{testGradient(truth, prediction)}}{Calculates the gradient of 
  loss function for a given true response and a corresponding prediction.}
\item{\code{testconstantInitializer(truth)}}{Calculates the constant 
  initialization of a given vector of true values.}
}
}

\examples{
# Sample data:
set.seed(123)
truth = 1:10
prediction = truth - rnorm(10)

# Load loss functions:
Rcpp::sourceCpp(code = getCustomCppExample(example = "loss", silent = TRUE))

# Create new custom quadratic loss:
my.cpp.loss = CustomCppLoss$new(lossFunSetter(), gradFunSetter(), constInitFunSetter())

# Calculate loss:
my.cpp.loss$testLoss(truth, prediction)

# Calculate gradient:
my.cpp.loss$testGradient(truth, prediction)

# Calculate the offset if this loss is used for the training:
my.cpp.loss$testConstantInitializer(truth)

}
