% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{CustomBlearner}
\alias{CustomBlearner}
\alias{CustomBlearner}
\title{Create custom base-learner by using R functions.}
\format{\code{\link{S4}} object.}
\description{
\code{CustomBlearner} creates a custom base-learner by using 
\code{Rcpp::Function} to set \code{R} functions.

\code{CustomCppBlearner} creates a custom base-learner by using 
\code{Rcpp::XPtr} to set \code{C++} functions.
}
\section{Usage}{

\preformatted{
CustomBlearner$new(data_source, data_target, instantiateData, train,
  predict, extractParameter)
}


\preformatted{
CustomCppBlearner(data_source, data_target, instantiate_data_ptr, train_ptr,
  predict_ptr)
}
}

\section{Arguments}{

\describe{
\item{\code{data_source} [\code{Data} Object]}{ 
  Data object which contains the source data.
}
\item{\code{data_target} [\code{Data} Object]}{ 
  Data object which gets the transformed source data.
}
\item{\code{instantiateData} [\code{function}]}{
  \code{R} function to transform the source data. For details see the
  \code{Details}.
}
\item{\code{train} [\code{function}]}{
  \code{R} function to train the base-learner on the target data. For 
  details see the \code{Details}.
}
\item{\code{predict} [\code{function}]}{
  \code{R} function to predict on the object returned by \code{train}.
  For details see the \code{Details}.
}
\item{\code{extractParameter} [\code{function}]}{
  \code{R} function to extract the parameter of the object returend by
  \code{train}. For details see the \code{Details}.
}
}


\describe{
\item{\code{data_source} [\code{Data} Object]}{ 
  Data object which contains the source data.
}
\item{\code{data_target} [\code{Data} Object]}{ 
  Data object which gets the transformed source data.
}
\item{\code{instantiate_data_ptr} [\code{externalptr}]}{
  External pointer to the \code{C++} instantiate data function.
}
\item{\code{train_ptr} [\code{externalptr}]}{
  External pointer to the \code{C++} train function.
}
\item{\code{predict_ptr} [\code{externalptr}]}{
  External pointer to the \code{C++} predict function.
}
}
}

\section{Details}{

  The functions must have the following structure:
  
  \code{instantiateData(X) { ... return (X.trafo) }} With a matrix argument 
  \code{X} and a matrix as return object.
  
  \code{train(y, X) { ... return (SEXP) }} With a vector argument \code{y} 
  and a matrix argument \code{X}. The target data is used in \code{X} while
  \code{y} contains the response. The function can return any \code{R} 
  object which is stored within a \code{SEXP}.
  
  \code{predict(model, newdata) { ... return (prediction) }} The returned 
  object of the \code{train} function is passed to the \code{model}
  argument while \code{newdata} contains a new matrix used for predicting.
  
  \code{extractParameter() { ... return (parameters) }} Again, \code{model}
  contains the object returned by \code{train}. The returned object must be
  a matrix containing the estimated parameter. If no parameter should be 
  estimated one can return \code{NA}.
  
  For an example see the \code{Examples}.
  
  This class is a wrapper around the pure \code{C++} implementation. To see
  the functionality of the \code{C++} class visit
  \url{https://schalkdaniel.github.io/compboost/cpp_man/html/classblearner_1_1_custom_blearner.html}.


  For an example see the extending compboost vignette or the function
  \code{getCustomCppExample}.
  
  This class is a wrapper around the pure \code{C++} implementation. To see
  the functionality of the \code{C++} class visit
  \url{https://schalkdaniel.github.io/compboost/cpp_man/html/classblearner_1_1_custom_cpp_blearner.html}.
}

\section{Fields}{

  This class doesn't contain public fields.


  This class doesn't contain public fields.
}

\section{Methods}{

\describe{
\item{\code{train(response)}}{Predict parameters of the base-learner using 
  a given \code{response}.}
\item{\code{getParameter()}}{Get the estimated parameters.}
\item{\code{predict()}}{Predict by using the train data.}
\item{\code{predictNewdata(newdata)}}{Predict by using a new \code{Data}  
  object.}
\item{\code{getData()}}{Get the data matrix of the target data which is used
  for modelling.}
}


\describe{
\item{\code{train(response)}}{Predict parameters of the base-learner using 
  a given \code{response}.}
\item{\code{getParameter()}}{Get the estimated parameters.}
\item{\code{predict()}}{Predict by using the train data.}
\item{\code{predictNewdata(newdata)}}{Predict by using a new \code{Data}  
  object.}
\item{\code{getData()}}{Get the data matrix of the target data which is used
  for modelling.}
}
}

\examples{
# Sample data:
data.mat = cbind(1, 1:10)
y = 2 + 3 * 1:10

# Create new data object:
data.source = InMemoryData$new(data.mat, "my.data.name")
data.target = InMemoryData$new()

instantiateDataFun = function (X) {
  return(X)
}
# Ordinary least squares estimator:
trainFun = function (y, X) {
  return(solve(t(X) \%*\% X) \%*\% t(X) \%*\% y)
}
predictFun = function (model, newdata) {
  return(as.matrix(newdata \%*\% model))
}
extractParameter = function (model) {
  return(as.matrix(model))
}

# Create new linear base-learner:
bl.custom = CustomBlearner$new(data.source, data.target, instantiateDataFun,
  trainFun, predictFun, extractParameter)

# Train the learner:
bl.custom$train(y)

# Get estimated parameter:
bl.custom$getParameter()

# Sample data:
data.mat = cbind(1, 1:10)
y = 2 + 3 * 1:10

# Create new data object:
data.source = InMemoryData$new(data.mat, "my.data.name")
data.target = InMemoryData$new()

# Source the external pointer exposed by using XPtr:
Rcpp::sourceCpp(code = getCustomCppExample(silent = TRUE))

# Create new linear base-learner:
bl.custom.cpp = CustomCppBlearner$new(data.source, data.target, dataFunSetter(),
  trainFunSetter(), predictFunSetter())

# Train the learner:
bl.custom.cpp$train(y)

# Get estimated parameter:
bl.custom.cpp$getParameter()

}
