// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// printRegisteredFactorys
void printRegisteredFactorys();
RcppExport SEXP _compboost_printRegisteredFactorys() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    printRegisteredFactorys();
    return R_NilValue;
END_RCPP
}
// clearRegisteredFactorys
void clearRegisteredFactorys();
RcppExport SEXP _compboost_clearRegisteredFactorys() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    clearRegisteredFactorys();
    return R_NilValue;
END_RCPP
}
// getBestBaselearner
Rcpp::List getBestBaselearner(arma::vec& pseudo_residuals);
RcppExport SEXP _compboost_getBestBaselearner(SEXP pseudo_residualsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type pseudo_residuals(pseudo_residualsSEXP);
    rcpp_result_gen = Rcpp::wrap(getBestBaselearner(pseudo_residuals));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
double timesTwo(std::vector<double> x);
RcppExport SEXP _compboost_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// timesTwoPtr
double timesTwoPtr(std::vector<double>& x);
RcppExport SEXP _compboost_timesTwoPtr(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwoPtr(x));
    return rcpp_result_gen;
END_RCPP
}
// playArma
arma::vec playArma(arma::vec& x);
RcppExport SEXP _compboost_playArma(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(playArma(x));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_baselearner_module();
RcppExport SEXP _rcpp_module_boot_compboost_module();
RcppExport SEXP _rcpp_module_boot_loss_module();

static const R_CallMethodDef CallEntries[] = {
    {"_compboost_printRegisteredFactorys", (DL_FUNC) &_compboost_printRegisteredFactorys, 0},
    {"_compboost_clearRegisteredFactorys", (DL_FUNC) &_compboost_clearRegisteredFactorys, 0},
    {"_compboost_getBestBaselearner", (DL_FUNC) &_compboost_getBestBaselearner, 1},
    {"_compboost_timesTwo", (DL_FUNC) &_compboost_timesTwo, 1},
    {"_compboost_timesTwoPtr", (DL_FUNC) &_compboost_timesTwoPtr, 1},
    {"_compboost_playArma", (DL_FUNC) &_compboost_playArma, 1},
    {"_rcpp_module_boot_baselearner_module", (DL_FUNC) &_rcpp_module_boot_baselearner_module, 0},
    {"_rcpp_module_boot_compboost_module", (DL_FUNC) &_rcpp_module_boot_compboost_module, 0},
    {"_rcpp_module_boot_loss_module", (DL_FUNC) &_rcpp_module_boot_loss_module, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_compboost(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
